// Generated by gencpp from file action_pure/purePursuitGoal.msg
// DO NOT EDIT!


#ifndef ACTION_PURE_MESSAGE_PUREPURSUITGOAL_H
#define ACTION_PURE_MESSAGE_PUREPURSUITGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_pure
{
template <class ContainerAllocator>
struct purePursuitGoal_
{
  typedef purePursuitGoal_<ContainerAllocator> Type;

  purePursuitGoal_()
    : pathx()
    , pathy()  {
    }
  purePursuitGoal_(const ContainerAllocator& _alloc)
    : pathx(_alloc)
    , pathy(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pathx_type;
  _pathx_type pathx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pathy_type;
  _pathy_type pathy;





  typedef boost::shared_ptr< ::action_pure::purePursuitGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_pure::purePursuitGoal_<ContainerAllocator> const> ConstPtr;

}; // struct purePursuitGoal_

typedef ::action_pure::purePursuitGoal_<std::allocator<void> > purePursuitGoal;

typedef boost::shared_ptr< ::action_pure::purePursuitGoal > purePursuitGoalPtr;
typedef boost::shared_ptr< ::action_pure::purePursuitGoal const> purePursuitGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_pure::purePursuitGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_pure::purePursuitGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_pure::purePursuitGoal_<ContainerAllocator1> & lhs, const ::action_pure::purePursuitGoal_<ContainerAllocator2> & rhs)
{
  return lhs.pathx == rhs.pathx &&
    lhs.pathy == rhs.pathy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_pure::purePursuitGoal_<ContainerAllocator1> & lhs, const ::action_pure::purePursuitGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_pure

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::action_pure::purePursuitGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_pure::purePursuitGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_pure::purePursuitGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_pure::purePursuitGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_pure::purePursuitGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_pure::purePursuitGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_pure::purePursuitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ce8eba3dd48a6f6b635533347d2b8ea";
  }

  static const char* value(const ::action_pure::purePursuitGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ce8eba3dd48a6f6ULL;
  static const uint64_t static_value2 = 0xb635533347d2b8eaULL;
};

template<class ContainerAllocator>
struct DataType< ::action_pure::purePursuitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_pure/purePursuitGoal";
  }

  static const char* value(const ::action_pure::purePursuitGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_pure::purePursuitGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"float32[] pathx  # 目标跟踪路径\n"
"float32[] pathy\n"
"\n"
;
  }

  static const char* value(const ::action_pure::purePursuitGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_pure::purePursuitGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pathx);
      stream.next(m.pathy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct purePursuitGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_pure::purePursuitGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_pure::purePursuitGoal_<ContainerAllocator>& v)
  {
    s << indent << "pathx[]" << std::endl;
    for (size_t i = 0; i < v.pathx.size(); ++i)
    {
      s << indent << "  pathx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathx[i]);
    }
    s << indent << "pathy[]" << std::endl;
    for (size_t i = 0; i < v.pathy.size(); ++i)
    {
      s << indent << "  pathy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pathy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_PURE_MESSAGE_PUREPURSUITGOAL_H
