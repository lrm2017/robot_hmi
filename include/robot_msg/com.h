// Generated by gencpp from file left_motor/com.msg
// DO NOT EDIT!


#ifndef LEFT_MOTOR_MESSAGE_COM_H
#define LEFT_MOTOR_MESSAGE_COM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace left_motor
{
template <class ContainerAllocator>
struct com_
{
  typedef com_<ContainerAllocator> Type;

  com_()
    : Data_1(0)
    , Data_2(0)  {
    }
  com_(const ContainerAllocator& _alloc)
    : Data_1(0)
    , Data_2(0)  {
  (void)_alloc;
    }



   typedef int16_t _Data_1_type;
  _Data_1_type Data_1;

   typedef int16_t _Data_2_type;
  _Data_2_type Data_2;





  typedef boost::shared_ptr< ::left_motor::com_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::left_motor::com_<ContainerAllocator> const> ConstPtr;

}; // struct com_

typedef ::left_motor::com_<std::allocator<void> > com;

typedef boost::shared_ptr< ::left_motor::com > comPtr;
typedef boost::shared_ptr< ::left_motor::com const> comConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::left_motor::com_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::left_motor::com_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::left_motor::com_<ContainerAllocator1> & lhs, const ::left_motor::com_<ContainerAllocator2> & rhs)
{
  return lhs.Data_1 == rhs.Data_1 &&
    lhs.Data_2 == rhs.Data_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::left_motor::com_<ContainerAllocator1> & lhs, const ::left_motor::com_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace left_motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::left_motor::com_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::left_motor::com_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::left_motor::com_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::left_motor::com_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::left_motor::com_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::left_motor::com_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::left_motor::com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da345f5bdd0c100faba0761a5bc9e537";
  }

  static const char* value(const ::left_motor::com_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda345f5bdd0c100fULL;
  static const uint64_t static_value2 = 0xaba0761a5bc9e537ULL;
};

template<class ContainerAllocator>
struct DataType< ::left_motor::com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "left_motor/com";
  }

  static const char* value(const ::left_motor::com_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::left_motor::com_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 Data_1\n"
"int16 Data_2\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::left_motor::com_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::left_motor::com_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Data_1);
      stream.next(m.Data_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct com_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::left_motor::com_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::left_motor::com_<ContainerAllocator>& v)
  {
    s << indent << "Data_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Data_1);
    s << indent << "Data_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Data_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEFT_MOTOR_MESSAGE_COM_H
